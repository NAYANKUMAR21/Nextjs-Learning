"use strict";(()=>{var e={};e.id=110,e.ids=[110],e.modules={1185:e=>{e.exports=require("mongoose")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},8266:(e,s,t)=>{t.r(s),t.d(s,{originalPathname:()=>h,patchFetch:()=>y,requestAsyncStorage:()=>g,routeModule:()=>m,serverHooks:()=>x,staticGenerationAsyncStorage:()=>f});var o={};t.r(o),t.d(o,{DELETE:()=>l,GET:()=>p,PATCH:()=>c});var n=t(9303),a=t(8716),r=t(670),d=t(7705),i=t(9509),u=t(7070);async function p(e){try{let s=e.nextUrl.pathname.split("/").pop();console.log(s);let t=await i.Z.find({userId:s});return u.NextResponse.json({message:"Todo fetched  successfully",data:t})}catch(e){if(e instanceof Error)return u.NextResponse.json({message:e.message},{status:500});return u.NextResponse.json({message:"Something unknown happend"},{status:500})}}async function c(e){try{let s=e.nextUrl.pathname.split("/").pop(),{todo:t,isCompleted:o}=await e.json();if(t)return await i.Z.findByIdAndUpdate({_id:s},{todo:t}),u.NextResponse.json({message:"Todo text updated successfully...!"},{status:200});return console.log(s,t,o),await i.Z.findByIdAndUpdate({_id:s},{isCompleted:o},{new:!0,runValidators:!0}),console.log("Updated completed "),u.NextResponse.json({message:"Todo is Completed updated successfully...!"},{status:200})}catch(e){if(e instanceof Error)return u.NextResponse.json({message:e.message},{status:500});return u.NextResponse.json({message:"Something unknowm happened"},{status:500})}}async function l(e){try{let s=e.nextUrl.pathname.split("/").pop();if(!s)return u.NextResponse.json({message:"Todo document Id is missing "},{status:400});return await i.Z.findByIdAndDelete({_id:s}),u.NextResponse.json({message:"Todo deleted successfully!...",success:!0},{status:200})}catch(e){if(e instanceof Error)return u.NextResponse.json({message:e.message},{status:500});return u.NextResponse.json({message:"Something unknowm happened"},{status:500})}}(0,d.Z)();let m=new n.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/todos/[id]/route",pathname:"/api/todos/[id]",filename:"route",bundlePath:"app/api/todos/[id]/route"},resolvedPagePath:"/Users/nayankumar/Desktop/Nextjs-Learning/todo-next/src/app/api/todos/[id]/route.ts",nextConfigOutput:"",userland:o}),{requestAsyncStorage:g,staticGenerationAsyncStorage:f,serverHooks:x}=m,h="/api/todos/[id]/route";function y(){return(0,r.patchFetch)({serverHooks:x,staticGenerationAsyncStorage:f})}},7705:(e,s,t)=>{t.d(s,{Z:()=>a});var o=t(1185),n=t.n(o);let a=async function(){try{n().connect(process.env.MONGO_URI);let e=n().connection;e.on("error",e=>{console.log(e.message),process.exit()}),e.on("connected",()=>{console.log("MongoDb connected successfully!..")})}catch(e){console.log("Something happened in ",e.message)}}},9509:(e,s,t)=>{t.d(s,{Z:()=>d});var o=t(1185),n=t.n(o);let a={todo:{type:String,require:!0},isCompleted:{type:Boolean,default:!1},createdAt:Date,userId:{type:n().Schema.Types.ObjectId,ref:"user",required:["Please enter User Id",!0]},update:{type:Boolean,default:!1}},r=new(n()).Schema(a,{versionKey:!1}),d=n().models.todo||n().model("todo",r)}};var s=require("../../../../webpack-runtime.js");s.C(e);var t=e=>s(s.s=e),o=s.X(0,[948,972],()=>t(8266));module.exports=o})();